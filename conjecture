#!pip install sympy
from matplotlib import pyplot as plt
%matplotlib inline
import sympy

number_of_primes_in_the_game=3#This is the number of primes in the game. no matter what value you choose, the result will always be 2
the_list_of_possible_numbers=list(range(number_of_primes_in_the_game**2))
primes=[i for i in the_list_of_possible_numbers if sympy.isprime(i) ]
the_list_of_possible_numbers=[]#releive the memory 
primes=primes[:number_of_primes_in_the_game]
#print(primes)
#primes = [2, 3, 5, 7, 11]
print(primes)
def is_it_cond_prime(my_number,primes):
    for prime in primes:
        if my_number in primes:
            return True
        if my_number%prime==0:
            return False
    return True
        
def count_primes_in_window(window, primes):
    count = 0
    for element in window:
        if is_it_cond_prime(element,primes):
            count += 1
    return count


n = primes[-1]+1
window_size = 2 * n + 1
window_counts = []
#total distance = multiply all primes. 
def multiplyList(myList):
    print('multiplication is done')
    # Multiply elements one by one
    result = 1
    for x in myList:
        result = result * x
    return result
 

total_distance=multiplyList(primes)

for start in range(1, total_distance,1):
    window = range(start, start + window_size)
    #print("here 1")
    count = count_primes_in_window(window, primes)
    #print("here 2")
    window_counts.append(count)

#print("Window counts:", window_counts)
print(max(window_counts))
window_position=list(range(len(window_counts)))
plt.bar(window_position,window_counts)

# Minimum element indices in list
# Using list comprehension + min() + enumerate()
this_is_always_2 = min(window_counts)
res = [i for i, j in enumerate(window_counts) if j == temp]

# Printing result
print("The Positions of minimum element : " + str(res))
print("this result is always", this_is_always_2)
